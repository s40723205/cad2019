var tipuesearch = {"pages": [{'title': 'Week', 'text': 'week 02-05 \n week 06-09 \n week10-14 \n week15-18 \n', 'tags': '', 'url': 'Week.html'}, {'title': 'Week02', 'text': '創建github倉儲並且練習github指令 \n 1.創立並且加入課程倉儲git clone到近端上， 下載 2019Fall可攜套件.7z ，完成後開啟start。 \n 2.使用git config --global user設定姓名、email、proxy。 \n 3.使用git submodule add 之指令建立目錄並取下子模組。 \n 4.輸入python -m pip install flask cors。 \n 5.當要開啟近端時必須要先進入cmsimde才能夠打上python wsgi.py指令，且開啟的隨身碟必須為正確的非虛擬的磁碟槽(如:d: or e:)才能夠開啟。 \n Week03 \n Solvespace編譯 \n 1. Y:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe。 \n 2.查驗github版本(2.13以上)。 \n 3.  \xa0git clone\xa0  --recurse-submodules。 \n 4.編輯cmakelist內之713及714行(加入#字號)。 \n 5.  cdsolvespace> cd extlib> cd libpng> mkdir build> cd build。 \n 6.執行cmake .. -G“ MinGW Makefiles” -DCMAKE_BUILD_TYPE =發布 mingw32-make。 \n 7.進行 \xa0libpng.dll.a 更名, 更名名為 libpng_static.a。 \n 8.回到 solvespace 原始碼目錄,建立 build 目錄後進入 build 目錄。 \n 9.在一次執行cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make。 \n Week04 \n 網站更新 \n 增加網站內容 \n Week04 \n 推薦錄影程式與字幕程式 \n 1.錄影程式 \n ShareX(圖一) \n \n (圖一) \n 但我個人還是喜歡用win10內建錄影 \n 2.編字幕編輯軟體 \n Aegisub(圖三) \n (圖三) \n 3.將影片與字幕何在一起 \n Arctime(圖四) \n (圖四) \n \n Week05 \n Solvespace的操作(聖誕樹) \n 1.首先先用直線畫出底座 \n 2.再用曲線畫出輪廓 \n 3.接著劃出旋轉軸並對正中心 \n 4.再點選旋轉軸，旋轉出整個輪廓 \n 5.再稍微修改一下 \n 6.改顏色 \n 7.選取一個點案  shift-w 建立新草圖 \n 8.在畫上面的裝飾 \n 9.更改裝飾顏色 \n 10.大功告成 \n 教學影片: \n (cc字幕) \n', 'tags': '', 'url': 'Week02.html'}, {'title': 'Week06', 'text': '第一步驟 \n 1.先畫出一個輪子，記得要畫出軸來組裝到車體上。 \n 2.畫出車體，記得要挖掉軸孔來配合輪子。 \n 3.將車體與輪子組裝起來，這樣就完成了。 \n 教學影片: \n \n (cc字幕) \n 第二步驟 \n 1.先到take1中 下載 \xa0 V-rep 3.6.1 rev 4.7z \xa0及 web_vrep2.zip \xa0( local ) 並解壓縮到隨身碟。 \n 2. 打開V-REP3內的VREP程式。 \n 3.再將web_vrep2中的two_wheeler.ttt檔案，導入VREP中。 \n 4.開啟web_vrep2中的app.py點下GO。 \n 5.在複製的網址中控制車子 \n 教學影片 \n (CC字幕) \n', 'tags': '', 'url': 'Week06.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n \n \n', 'tags': '', 'url': 'Develop.html'}]};